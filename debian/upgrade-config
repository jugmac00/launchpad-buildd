#!/usr/bin/python3
#
# Copyright 2009-2020 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Upgrade a launchpad-buildd configuration file."""

try:
    from configparser import ConfigParser as SafeConfigParser
    from configparser import NoOptionError, NoSectionError
except ImportError:
    from ConfigParser import (
        SafeConfigParser,
        NoOptionError,
        NoSectionError,
    )

import os
import re
import subprocess
import sys

import apt_pkg

apt_pkg.init()

(old_version, conf_file) = sys.argv[1:]

bin_path = "/usr/share/launchpad-buildd/slavebin"


def upgrade_to_12():
    print("Upgrading %s to version 12" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev12~"])
    in_file = open(conf_file + "-prev12~")
    out_file = open(conf_file, "w")
    for line in in_file:
        if line.startswith("[debianmanager]"):
            line += "ogrepath = %s/apply-ogre-model\n" % bin_path
        if line.startswith("sbuildargs"):
            line = line.replace("-A", "")
        out_file.write(line)
    in_file.close()
    out_file.close()


def upgrade_to_34():
    print("Upgrading %s to version 34" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev34~"])
    in_file = open(conf_file + "-prev34~")
    out_file = open(conf_file, "w")
    for line in in_file:
        if line.startswith("[debianmanager]"):
            line += "sourcespath = %s/override-sources-list\n" % bin_path
        out_file.write(line)
    in_file.close()
    out_file.close()


def upgrade_to_39():
    print("Upgrading %s to version 39" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev39~"])
    in_file = open(conf_file + "-prev39~")
    out_file = open(conf_file, "w")
    for line in in_file:
        if line.startswith("sbuildargs"):
            line = line.replace("-dautobuild ", "")
        if line.startswith("[slave]"):
            line += "ntphost = ntp.buildd\n"
        out_file.write(line)
    in_file.close()
    out_file.close()


def upgrade_to_57():
    print("Upgrading %s to version 57" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev57~"])
    in_file = open(conf_file + "-prev57~")
    out_file = open(conf_file, "w")
    # We want to move all the sbuild lines to a new
    # 'binarypackagemanager' section at the end.
    binarypackage_lines = []
    for line in in_file:
        if line.startswith("sbuild"):
            binarypackage_lines.append(line)
        else:
            out_file.write(line)
    out_file.write("[binarypackagemanager]\n")
    for line in binarypackage_lines:
        out_file.write(line)
    in_file.close()
    out_file.close()


def upgrade_to_58():
    print("Upgrading %s to version 58" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev58~"])
    in_file = open(conf_file + "-prev58~")
    out_file = open(conf_file, "w")
    out_file.write(in_file.read())
    out_file.write(
        "\n[sourcepackagerecipemanager]\n"
        "buildrecipepath = %s/buildrecipe\n" % bin_path
    )


def upgrade_to_59():
    print("Upgrading %s to version 59" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev59~"])
    in_file = open(conf_file + "-prev59~")
    out_file = open(conf_file, "w")
    out_file.write(in_file.read())
    out_file.write(
        "\n[translationtemplatesmanager]\n"
        "generatepath = %s/generate-translation-templates\n"
        "resultarchive = translation-templates.tar.gz\n" % bin_path
    )


def upgrade_to_63():
    print("Upgrading %s to version 63" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev63~"])
    in_file = open(conf_file + "-prev63~")
    out_file = open(conf_file, "w")
    for line in in_file:
        if not line.startswith("ogrepath"):
            out_file.write(line)


def upgrade_to_110():
    print("Upgrading %s to version 110" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev110~"])
    in_file = open(conf_file + "-prev110~")
    out_file = open(conf_file, "w")
    for line in in_file:
        if line.startswith("[allmanagers]"):
            line += "preppath = %s/slave-prep\n" % bin_path
        out_file.write(line)
    in_file.close()
    out_file.close()


def upgrade_to_115():
    print("Upgrading %s to version 115" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev115~"])
    in_allmanagers = False
    in_file = open(conf_file + "-prev115~")
    out_file = open(conf_file, "w")
    for line in in_file:
        if line.startswith("[allmanagers]"):
            in_allmanagers = True
        elif in_allmanagers and (line.startswith("[") or not line.strip()):
            out_file.write(
                "processscanpath = %s/scan-for-processes\n" % bin_path
            )
            in_allmanagers = False
        if not line.startswith("processscanpath = "):
            out_file.write(line)
    in_file.close()
    out_file.close()


def upgrade_to_120():
    print("Upgrading %s to version 120" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev120~"])
    in_file = open(conf_file + "-prev120~")
    out_file = open(conf_file, "w")
    out_file.write(in_file.read())
    out_file.write(
        "\n[livefilesystemmanager]\n"
        "buildlivefspath = %s/buildlivefs\n" % bin_path
    )
    in_file.close()
    out_file.close()


def upgrade_to_126():
    print("Upgrading %s to version 126" % conf_file)
    subprocess.call(["mv", conf_file, conf_file + "-prev126~"])
    in_file = open(conf_file + "-prev126~")
    out_file = open(conf_file, "w")
    archive_ubuntu = " --archive=ubuntu"
    for line in in_file:
        line = line.rstrip("\n")
        if line.endswith(archive_ubuntu):
            line = line[: -len(archive_ubuntu)]
        out_file.write(line + "\n")
    in_file.close()
    out_file.close()


def upgrade_to_127():
    print("Upgrading %s to version 127" % conf_file)
    os.rename(conf_file, conf_file + "-prev127~")

    in_file = open(conf_file + "-prev127~")
    out_file = open(conf_file, "w")
    obsolete_prefixes = [
        "[allmanagers]",
        "[debianmanager]",
        "[binarypackagemanager]",
        "[sourcepackagerecipemanager]",
        "[livefilesystemmanager]",
        "preppath ",
        "unpackpath ",
        "cleanpath ",
        "mountpath ",
        "umountpath ",
        "processscanpath ",
        "updatepath ",
        "sourcespath ",
        "sbuildpath ",
        "sbuildargs ",
        "buildrecipepath ",
        "generatepath ",
        "buildlivefspath ",
    ]
    wrote_blank = False
    for line in in_file:
        # Remove obsolete paths and sections.
        if any(line.startswith(p) for p in obsolete_prefixes):
            continue
        # Squash any sequences of blank lines into a single one.
        if not line.strip():
            if wrote_blank:
                continue
            wrote_blank = True
        else:
            wrote_blank = False
        out_file.write(line)
        # Add single new sharepath to the end of the slave section.
        if line.startswith("ntphost "):
            out_file.write("sharepath = /usr/share/launchpad-buildd\n")
    in_file.close()
    out_file.close()


def upgrade_to_162():
    print("Upgrading %s to version 162" % conf_file)
    os.rename(conf_file, conf_file + "-prev162~")

    with open(conf_file + "-prev162~") as in_file:
        with open(conf_file, "w") as out_file:
            out_file.write(in_file.read())
            out_file.write("\n[snapmanager]\n" "proxyport = 8222\n")


def upgrade_to_190():
    print("Upgrading %s to version 190" % conf_file)
    os.rename(conf_file, conf_file + "-prev190~")

    with open(conf_file + "-prev190~") as in_file:
        with open(conf_file, "w") as out_file:
            for line in in_file:
                if line.strip() == "[slave]":
                    line = "[builder]\n"
                out_file.write(line)


def upgrade_to_200():
    print("Upgrading %s to version 200" % conf_file)

    # We need to move snapmanager.proxyport to builder.proxyport, so start
    # by parsing the existing file to find the current value.
    conf = SafeConfigParser()
    conf.read(conf_file)
    try:
        proxyport = conf.get("snapmanager", "proxyport")
    except (NoOptionError, NoSectionError):
        proxyport = None

    os.rename(conf_file, conf_file + "-prev200~")
    with open(conf_file + "-prev200~") as in_file:
        with open(conf_file, "w") as out_file:
            in_builder = False
            in_snapmanager = False
            wrote_blank = False
            for line in in_file:
                if line.startswith("[builder]"):
                    in_builder = True
                elif in_builder and (line.startswith("[") or not line.strip()):
                    if proxyport is not None:
                        out_file.write("proxyport = %s\n" % proxyport)
                    in_builder = False
                elif line.startswith("[snapmanager]"):
                    # Delete this section.
                    in_snapmanager = True

                if not line.strip():
                    wrote_blank = True
                elif not in_snapmanager:
                    if wrote_blank:
                        out_file.write("\n")
                    out_file.write(line)
                    wrote_blank = False

                if (
                    in_snapmanager
                    and not line.startswith("[snapmanager]")
                    and (line.startswith("[") or not line.strip())
                ):
                    in_snapmanager = False


if __name__ == "__main__":
    old_version = re.sub(r"[~-].*", "", old_version)
    if apt_pkg.version_compare(old_version, "12") < 0:
        upgrade_to_12()
    if apt_pkg.version_compare(old_version, "34") < 0:
        upgrade_to_34()
    if apt_pkg.version_compare(old_version, "39") < 0:
        upgrade_to_39()
    if apt_pkg.version_compare(old_version, "57") < 0:
        upgrade_to_57()
    if apt_pkg.version_compare(old_version, "58") < 0:
        upgrade_to_58()
    if apt_pkg.version_compare(old_version, "59") < 0:
        upgrade_to_59()
    if apt_pkg.version_compare(old_version, "63") < 0:
        upgrade_to_63()
    if apt_pkg.version_compare(old_version, "110") < 0:
        upgrade_to_110()
    if apt_pkg.version_compare(old_version, "115") < 0:
        upgrade_to_115()
    if apt_pkg.version_compare(old_version, "120") < 0:
        upgrade_to_120()
    if apt_pkg.version_compare(old_version, "126") < 0:
        upgrade_to_126()
    if apt_pkg.version_compare(old_version, "127") < 0:
        upgrade_to_127()
    if apt_pkg.version_compare(old_version, "162") < 0:
        upgrade_to_162()
    if apt_pkg.version_compare(old_version, "190") < 0:
        upgrade_to_190()
    if apt_pkg.version_compare(old_version, "200") < 0:
        upgrade_to_200()
